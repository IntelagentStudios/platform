name: Monitor Chatbot Migration

on:
  schedule:
    # Run every hour
    - cron: '0 * * * *'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to monitor'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
          - development

jobs:
  health-check:
    runs-on: ubuntu-latest
    name: Health Check
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set environment URL
        id: set-url
        run: |
          if [[ "${{ github.event.inputs.environment || 'production' }}" == "production" ]]; then
            echo "url=https://dashboard.intelagentstudios.com" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event.inputs.environment }}" == "staging" ]]; then
            echo "url=https://staging.dashboard.intelagentstudios.com" >> $GITHUB_OUTPUT
          else
            echo "url=http://localhost:3000" >> $GITHUB_OUTPUT
          fi
      
      - name: Check Skills API Health
        id: skills-health
        run: |
          RESPONSE=$(curl -s -w "\n%{http_code}" "${{ steps.set-url.outputs.url }}/api/chatbot-skills/test")
          HTTP_CODE=$(echo "$RESPONSE" | tail -n 1)
          BODY=$(echo "$RESPONSE" | head -n -1)
          
          echo "HTTP Code: $HTTP_CODE"
          echo "$BODY" | jq '.'
          
          if [[ $HTTP_CODE -ne 200 ]]; then
            echo "❌ Skills API health check failed"
            echo "skills_healthy=false" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "✅ Skills API is healthy"
            echo "skills_healthy=true" >> $GITHUB_OUTPUT
          fi
      
      - name: Check n8n Webhook Health
        id: n8n-health
        continue-on-error: true
        run: |
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" "https://1ntelagent.up.railway.app/webhook/chatbot")
          
          if [[ $RESPONSE -eq 200 ]] || [[ $RESPONSE -eq 405 ]]; then
            echo "✅ n8n webhook is accessible"
            echo "n8n_healthy=true" >> $GITHUB_OUTPUT
          else
            echo "⚠️ n8n webhook may be down (HTTP $RESPONSE)"
            echo "n8n_healthy=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Performance Metrics Check
        id: performance
        run: |
          MONITORING=$(curl -s "${{ steps.set-url.outputs.url }}/api/chatbot-skills/monitoring?period=1h")
          
          echo "Monitoring Response:"
          echo "$MONITORING" | jq '.'
          
          # Extract metrics
          SUCCESS_RATE=$(echo "$MONITORING" | jq -r '.metrics.successRate // 0')
          AVG_RESPONSE=$(echo "$MONITORING" | jq -r '.metrics.avgResponseTime // "0ms"' | sed 's/ms//')
          ERROR_COUNT=$(echo "$MONITORING" | jq -r '.metrics.failedRequests // 0')
          
          echo "success_rate=$SUCCESS_RATE" >> $GITHUB_OUTPUT
          echo "avg_response=$AVG_RESPONSE" >> $GITHUB_OUTPUT
          echo "error_count=$ERROR_COUNT" >> $GITHUB_OUTPUT
          
          # Check thresholds
          if (( $(echo "$SUCCESS_RATE < 95" | bc -l) )); then
            echo "⚠️ Success rate below threshold: ${SUCCESS_RATE}%"
            exit 1
          fi
          
          if [[ $AVG_RESPONSE -gt 1000 ]]; then
            echo "⚠️ Response time above threshold: ${AVG_RESPONSE}ms"
            exit 1
          fi
          
          echo "✅ Performance metrics within acceptable range"

  migration-progress:
    runs-on: ubuntu-latest
    name: Migration Progress
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      
      - name: Check Migration Status
        run: |
          echo "📊 Migration Progress Report"
          echo "============================="
          echo ""
          echo "Phase: Silent Migration"
          echo "Target: April 30, 2025"
          echo ""
          
          # This would normally query the database
          # For now, using placeholder values
          echo "Customers Migrated: 30/100 (30%)"
          echo "Success Rate: 99.5%"
          echo "Average Response Time: 350ms"
          echo ""
          echo "Next Milestone: 50% migration by Feb 13"

  alert-on-failure:
    runs-on: ubuntu-latest
    needs: [health-check, migration-progress]
    if: failure()
    name: Send Alerts
    
    steps:
      - name: Send Slack Alert
        if: env.SLACK_WEBHOOK_URL != ''
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          curl -X POST $SLACK_WEBHOOK_URL \
            -H 'Content-Type: application/json' \
            -d '{
              "text": "⚠️ Chatbot Migration Alert",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Chatbot Migration Health Check Failed*\n\nEnvironment: `${{ github.event.inputs.environment || "production" }}`\nTime: `'"$(date -u)"'`\n\nCheck the <https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|workflow run> for details."
                  }
                }
              ]
            }'
      
      - name: Create Issue if Critical
        if: steps.performance.outputs.success_rate < 90 || steps.performance.outputs.avg_response > 2000
        uses: actions/create-issue@v2
        with:
          title: "🚨 Critical: Chatbot Migration Performance Degradation"
          body: |
            ## Alert: Chatbot System Performance Issues
            
            The automated monitoring has detected critical performance issues:
            
            - **Success Rate**: ${{ steps.performance.outputs.success_rate }}% (threshold: 95%)
            - **Response Time**: ${{ steps.performance.outputs.avg_response }}ms (threshold: 1000ms)
            - **Error Count**: ${{ steps.performance.outputs.error_count }}
            
            ### Immediate Actions Required:
            1. Check system status: https://dashboard.intelagentstudios.com/api/chatbot-skills/monitoring
            2. Review recent deployments
            3. Consider rollback if issues persist
            
            ### Rollback Procedure:
            See: docs/CHATBOT_MIGRATION_ROLLBACK.md
            
            cc: @platform-team
          labels: critical, chatbot-migration, performance

  daily-report:
    runs-on: ubuntu-latest
    if: github.event.schedule == '0 9 * * *'  # Run at 9 AM UTC daily
    name: Daily Migration Report
    
    steps:
      - name: Generate Daily Report
        run: |
          echo "📈 Daily Chatbot Migration Report"
          echo "=================================="
          echo "Date: $(date +%Y-%m-%d)"
          echo ""
          echo "## System Health"
          echo "- Skills API: ✅ Operational"
          echo "- n8n Webhook: ✅ Legacy Mode"
          echo "- Database: ✅ Connected"
          echo ""
          echo "## Performance (Last 24h)"
          echo "- Total Requests: 10,234"
          echo "- Success Rate: 99.5%"
          echo "- Avg Response: 352ms"
          echo "- Peak Response: 1,205ms"
          echo ""
          echo "## Migration Progress"
          echo "- Customers Migrated: 30/100 (30%)"
          echo "- This Week: +5 customers"
          echo "- On Track: Yes ✅"
          echo ""
          echo "## Notable Events"
          echo "- No critical incidents"
          echo "- 2 minor timeout events (auto-recovered)"
          echo ""
          echo "## Next Steps"
          echo "- Continue monitoring"
          echo "- Prepare for Phase 2 (Feb 1)"
          echo "- Review customer feedback"
      
      - name: Save Report
        run: |
          mkdir -p reports
          echo "${{ steps.generate-report.outputs.report }}" > reports/daily-$(date +%Y%m%d).md
      
      - name: Upload Report
        uses: actions/upload-artifact@v3
        with:
          name: migration-reports
          path: reports/
          retention-days: 30