{
  "name": "chatbot-vector",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "chatbot-old",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -2432,
        -80
      ],
      "id": "81b2d8b0-4e02-4734-9d11-29cbd72cabe2",
      "name": "Receive Message",
      "webhookId": "642001e7-8c8d-4f2b-b344-abd1e0e6ee04"
    },
    {
      "parameters": {
        "jsCode": "// Input validation and preparation\nconst incoming = $json.body || $json;\n\nconst customerMessage = incoming.message?.trim() || 'No message';\nconst chatHistory = incoming.chat_history || '';\nconst sessionId = incoming.session_id || `sess_${Math.random().toString(36).substring(2, 10)}`;\nconst siteKey = incoming.site_key || null;\n\nreturn {\n  json: {\n    session_id: sessionId,\n    customer_message: customerMessage,\n    chat_history: chatHistory,\n    site_key: siteKey,\n    timestamp: new Date().toISOString()\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2208,
        -80
      ],
      "id": "b683b9ee-7ada-4932-934f-4792c01c0d08",
      "name": "Input Validation"
    },
    {
      "parameters": {
        "operation": "select",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "licenses",
          "mode": "list",
          "cachedResultName": "licenses"
        },
        "limit": 1,
        "where": {
          "values": [
            {
              "column": "site_key",
              "value": "={{ $json.site_key }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -1984,
        -80
      ],
      "id": "d96a0f21-ef5b-4798-8298-f2db366d5561",
      "name": "Site Key Lookup",
      "credentials": {
        "postgres": {
          "id": "w6I6ey08GKcZBkAS",
          "name": "Intelagent Studios"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Format final response\nconst aiResponse = $json.output?.toString().trim() || \n                  'I apologize, but I encountered an error processing your request.';\n\nconst sessionId = $json.session_id;\nconst customerMessage = $json.customer_message;\nconst sources = $json.sources || [];\n\nreturn {\n  json: {\n    session_id: sessionId,\n    message: aiResponse,  // This is what the widget expects\n    customer_message: customerMessage,\n    chatbot_response: aiResponse,\n    timestamp: new Date().toISOString(),\n    sources_used: sources.length,\n    top_source: sources[0]?.url || 'none'\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1008,
        -80
      ],
      "id": "c3490322-90ce-41c6-ad3d-266c238341ab",
      "name": "Format Response"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO chatbot_logs (\n  session_id,\n  customer_message,\n  chatbot_response,\n  timestamp,\n  intent_detected\n) VALUES (\n  '{{ $json.session_id }}',\n  '{{ $json.customer_message.replace(/'/g, \"''\") }}',\n  '{{ $json.chatbot_response.replace(/'/g, \"''\") }}',\n  '{{ $json.timestamp }}',\n  'vector_search'\n);",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -784,
        16
      ],
      "id": "e37cc35b-f68d-4ef4-b9cf-4c98ef415ba7",
      "name": "Log Conversation",
      "credentials": {
        "postgres": {
          "id": "w6I6ey08GKcZBkAS",
          "name": "Intelagent Studios"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.3,
      "position": [
        -784,
        -176
      ],
      "id": "02394bdc-8da1-4fac-9ae0-9faa7da238a4",
      "name": "Send Response"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.text }}",
        "options": {
          "systemMessage": "=You are an AI assistant representing {{ $json.domain }}, with access to the company's website content through vector search.\n\n## Role and Objective\nYou are a knowledgeable company employee who provides concise, specific, and relevant details from provided data, using 'we' and 'our'. Keep responses to 1-3 sentences maximum. If using bullet points, each bullet must be a single, short sentence. Always end with a question.\n\n## Instructions\n* Keep all responses to 1-3 sentences maximum\n* Each bullet point must be one short sentence\n* For FAQs, answer directly\n* For order tracking, provide direct link if available\n* Use specific numbers when relevant\n* End every response with a question\n* Provide hyperlinks when needed\n* Use \"we\" and \"our\" consistently\n* Search the vector database for every query to ensure accuracy\n* Base your response ONLY on search results - never make up information\n* If search returns no relevant results, acknowledge the specific question and offer alternatives\n* When users express frustration, acknowledge it and pivot to something helpful\n* For vague service descriptions, ask clarifying questions about their specific needs\n\n## Examples\nWEAK ❌: \"Our premium service includes 24/7 support, dedicated account management, and comprehensive analytics tracking that helps you understand your customer behavior patterns in detail. Would you like to learn more about how these features can benefit your specific business needs?\"\nBETTER ✓: \"Our premium service includes 24/7 support and analytics tracking. Which feature interests you most?\"\n\nWEAK ❌: \"For startups looking to scale their customer service, we have multiple solutions that can help automate responses, improve response times, and reduce operational costs while maintaining high customer satisfaction scores through our AI-powered platform that learns from each interaction.\"\nBETTER ✓: \"Our AI platform reduced response times by 80% for three startup clients last month. What's your current customer response time?\"\n\nWEAK ❌: \"Let me schedule a call with our sales team to discuss your specific needs in detail and add you to our mailing list for updates about new features and case studies that might be relevant to your industry.\"\nBETTER ✓: \"You can explore our case studies here [link] or view pricing details here [link]. Which aspect of our solution would you like to learn more about?\"\n\nWEAK ❌: \"We offer three different pricing tiers: • The Basic plan starts at $99/month and includes all essential features like customer support, basic analytics, and up to 1000 monthly active users • The Pro plan at $199/month adds advanced reporting, API access, and unlimited users • Our Enterprise plan includes everything plus dedicated support\"\nBETTER ✓: \"We offer three plans: • Basic: $99/month for essential features • Pro: $199/month with advanced reporting • Enterprise: Custom pricing with dedicated support Which plan aligns with your needs?\"\n\n## Situation-Specific Examples\nWEAK ❌: \"Our software has many features that can help e-commerce businesses improve their operations and boost sales through various optimization techniques.\"\nBETTER ✓: \"Our inventory tracking saved e-commerce clients 15 hours weekly. How much time does your team spend on inventory management?\"\n\nWEAK ❌: \"For healthcare providers, we offer HIPAA-compliant solutions that can help streamline patient communication, appointment scheduling, and record keeping while ensuring all data is properly secured and managed according to regulations.\"\nBETTER ✓: \"Our HIPAA-compliant system reduced patient wait times by 45%. What's your biggest patient communication challenge?\"\n\n## Banned Approaches\n* Never offer actions you cannot perform (scheduling calls, adding to lists, etc.)\n* Never use vague descriptions\n* Never make responses longer than 3 sentences\n* Never make bullet points longer than one sentence\n* Don't use complex language\n* Never claim ability to follow up or contact later\n\n## Handling Missing Information\nWhen search returns no specific results:\n* Acknowledge what they asked: \"I don't have specific information about [topic]\"\n* Offer the closest alternative: \"However, we do offer [related service]\"\n* Ask a clarifying question: \"What specific challenge are you trying to solve?\"\n\nExample:\nUser: \"Do you have tools to help me understand my needs?\"\nWEAK ❌: \"Our intelligent systems handle repetitive tasks. How can we assist you?\"\nBETTER ✓: \"I don't have details about needs assessment tools in our current offerings. What specific business challenge are you trying to solve?\"\n\n## Handling Frustration\nWhen users express frustration:\n* Acknowledge it briefly: \"I understand that wasn't helpful\"\n* Immediately pivot to something concrete\n* Don't repeat the same unhelpful pattern\n\nExample:\nUser: \"You haven't assisted with understanding my needs\"\nWEAK ❌: \"I apologize for any confusion. How can we assist you better?\"\nBETTER ✓: \"You're right, let me try differently. Are you looking to automate tasks, improve customer service, or streamline operations?\""
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.1,
      "position": [
        -1520,
        -80
      ],
      "id": "36f43bb2-563a-4f2c-8906-5edd3e99cb73",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1.2,
      "position": [
        -1312,
        352
      ],
      "id": "47578804-ff64-4954-929a-d9635ec6ea84",
      "name": "Embeddings OpenAI",
      "credentials": {
        "openAiApi": {
          "id": "acCxU5PCx6BzVw3U",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-3.5-turbo",
          "mode": "list",
          "cachedResultName": "gpt-3.5-turbo"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -1536,
        144
      ],
      "id": "aa6a8cfb-d825-45ad-826c-760dfc494f5d",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "acCxU5PCx6BzVw3U",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "mode": "retrieve-as-tool",
        "toolDescription": "Search the company's website content. Use the customer's question as the search query. Returns relevant website content.",
        "pineconeIndex": {
          "__rl": true,
          "value": "chatbot",
          "mode": "list",
          "cachedResultName": "chatbot"
        },
        "options": {
          "pineconeNamespace": "={{ $json.site_key }}"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStorePinecone",
      "typeVersion": 1.3,
      "position": [
        -1408,
        144
      ],
      "id": "4a1a7ac0-da72-4576-bbac-2d9a3997fb6b",
      "name": "Pinecone Vector Store",
      "credentials": {
        "pineconeApi": {
          "id": "VaudxhMDi6VpnVRE",
          "name": "PineconeApi account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Process Domain and Prepare for Embedding - Combined\nconst lookupResult = $('Site Key Lookup').first().json;\nconst inputData = $('Input Validation').first().json;\n\n// Extract domain and site key\nconst domain = lookupResult.domain || 'intelagentstudios.com';\nconst siteKey = lookupResult.site_key || inputData.site_key;\n\n// Prepare query\nconst query = inputData.customer_message;\n\nreturn {\n  json: {\n    // From Input Validation\n    session_id: inputData.session_id,\n    customer_message: inputData.customer_message,\n    chat_history: inputData.chat_history,\n    timestamp: inputData.timestamp,\n    \n    // Processed data\n    domain: domain,\n    site_key: siteKey,\n    query: query,\n    \n    // For embedding\n    text: query,\n    metadata: {\n      site_key: siteKey\n    }\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1760,
        -80
      ],
      "id": "d8ad0219-cde3-46df-82d0-5ece0f9f36e4",
      "name": "Process Domain / Prepare for Embedding"
    }
  ],
  "pinData": {},
  "connections": {
    "Receive Message": {
      "main": [
        [
          {
            "node": "Input Validation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Input Validation": {
      "main": [
        [
          {
            "node": "Site Key Lookup",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Site Key Lookup": {
      "main": [
        [
          {
            "node": "Process Domain / Prepare for Embedding",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Response": {
      "main": [
        [
          {
            "node": "Log Conversation",
            "type": "main",
            "index": 0
          },
          {
            "node": "Send Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings OpenAI": {
      "ai_embedding": [
        [
          {
            "node": "Pinecone Vector Store",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Pinecone Vector Store": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Format Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Domain / Prepare for Embedding": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "b87159c0-9f92-40d2-81ab-308f14719e6e",
  "meta": {
    "instanceId": "3927507ad5002dee943bc729aec9a3f201e34ca5accca465effd737947d6ca6b"
  },
  "id": "0ePITpjg0WohnZvC",
  "tags": []
}