{
  "name": "Token-Optimized Knowledge Handler",
  "description": "Add this Code node after Input Validation to optimize token usage",
  "code": "// Smart Knowledge Filtering\nconst incoming = $json;\nconst customerMessage = incoming.customer_message?.toLowerCase() || '';\nconst fullKnowledge = incoming.custom_knowledge || '';\n\n// Keywords that require custom knowledge\nconst knowledgeKeywords = [\n  'hours', 'open', 'close', 'contact', 'email', 'phone', 'address',\n  'price', 'cost', 'pricing', 'plan', 'tier', 'subscription',\n  'about', 'who', 'what do you', 'services', 'products',\n  'support', 'help', 'warranty', 'guarantee', 'refund',\n  'delivery', 'shipping', 'payment', 'billing'\n];\n\n// Check if query needs custom knowledge\nconst needsKnowledge = knowledgeKeywords.some(keyword => \n  customerMessage.includes(keyword)\n);\n\n// Truncate knowledge if too long (max 1000 chars)\nlet optimizedKnowledge = '';\nif (needsKnowledge && fullKnowledge) {\n  // For questions about specific topics, try to extract relevant sections\n  if (customerMessage.includes('hours') || customerMessage.includes('open')) {\n    // Look for hours-related content\n    const hoursMatch = fullKnowledge.match(/.*hours.*|.*open.*|.*Monday.*|.*weekend.*/gi);\n    optimizedKnowledge = hoursMatch ? hoursMatch.join('\\n') : fullKnowledge.substring(0, 500);\n  } else if (customerMessage.includes('price') || customerMessage.includes('cost')) {\n    // Look for pricing-related content\n    const priceMatch = fullKnowledge.match(/.*price.*|.*cost.*|.*\\$.*|.*plan.*/gi);\n    optimizedKnowledge = priceMatch ? priceMatch.join('\\n') : fullKnowledge.substring(0, 500);\n  } else {\n    // General query - use first 1000 chars\n    optimizedKnowledge = fullKnowledge.substring(0, 1000);\n  }\n}\n\n// Token estimation (rough)\nconst estimatedTokens = (customerMessage.length + optimizedKnowledge.length) / 4;\n\nreturn {\n  json: {\n    ...incoming,\n    custom_knowledge: optimizedKnowledge,\n    knowledge_used: needsKnowledge,\n    estimated_tokens: Math.round(estimatedTokens),\n    knowledge_truncated: fullKnowledge.length > 1000\n  }\n};"
}