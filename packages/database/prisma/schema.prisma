generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["public"]
}

model admin_users {
  id            String    @id @db.VarChar(30)
  email         String    @unique @db.VarChar(255)
  name          String?   @db.VarChar(255)
  password      String?   @db.VarChar(255)
  role          String?   @default("USER") @db.VarChar(50)
  emailVerified DateTime? @db.Timestamp(6)
  image         String?   @db.VarChar(255)
  createdAt     DateTime? @default(now()) @db.Timestamp(6)
  updatedAt     DateTime? @default(now()) @db.Timestamp(6)

  @@schema("public")
}

model annotation_tag_entity {
  id                        String                      @id(map: "PK_69dfa041592c30bbc0d4b84aa00") @db.VarChar(16)
  name                      String                      @unique(map: "IDX_ae51b54c4bb430cf92f48b623f") @db.VarChar(24)
  createdAt                 DateTime                    @default(dbgenerated("CURRENT_TIMESTAMP(3)")) @db.Timestamptz(3)
  updatedAt                 DateTime                    @default(dbgenerated("CURRENT_TIMESTAMP(3)")) @db.Timestamptz(3)
  execution_annotation_tags execution_annotation_tags[]

  @@schema("public")
}

model api_keys {
  id           String    @id @default(dbgenerated("(gen_random_uuid())::character varying")) @db.VarChar(36)
  user_id      String    @db.VarChar(36)
  name         String    @db.VarChar(255)
  key_hash     String    @unique @db.VarChar(255)
  key_preview  String    @db.VarChar(20)
  permissions  Json?     @default("[\"read\"]")
  rate_limit   Int?      @default(100)
  status       String?   @default("active") @db.VarChar(20)
  last_used_at DateTime? @db.Timestamptz(6)
  expires_at   DateTime? @db.Timestamptz(6)
  created_at   DateTime? @default(now()) @db.Timestamptz(6)

  @@index([user_id], map: "idx_api_keys_user")
  @@schema("public")
}

model applied_discounts {
  id                    String    @id @default(dbgenerated("(gen_random_uuid())::character varying")) @db.VarChar(36)
  license_key           String    @db.VarChar(20)
  pricing_rule_id       String    @db.VarChar(36)
  discount_amount_pence Int
  applied_at            DateTime? @default(now()) @db.Timestamptz(6)
  expires_at            DateTime? @db.Timestamptz(6)

  @@schema("public")
}

model audit_logs {
  id            String    @id @default(dbgenerated("(gen_random_uuid())::character varying")) @db.VarChar(36)
  license_key   String    @db.VarChar(20)
  user_id       String?   @db.VarChar(36)
  action        String    @db.VarChar(100)
  resource_type String?   @db.VarChar(50)
  resource_id   String?   @db.VarChar(255)
  changes       Json?
  ip_address    String?   @db.VarChar(45)
  user_agent    String?
  created_at    DateTime? @default(now()) @db.Timestamptz(6)

  @@index([license_key], map: "idx_audit_license")
  @@schema("public")
}

model auth_identity {
  userId       String?  @db.Uuid
  providerId   String   @db.VarChar(64)
  providerType String   @db.VarChar(32)
  createdAt    DateTime @default(dbgenerated("CURRENT_TIMESTAMP(3)")) @db.Timestamptz(3)
  updatedAt    DateTime @default(dbgenerated("CURRENT_TIMESTAMP(3)")) @db.Timestamptz(3)
  user         user?    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([providerId, providerType])
  @@schema("public")
}

model auth_provider_sync_history {
  id           Int      @id @default(autoincrement())
  providerType String   @db.VarChar(32)
  runMode      String
  status       String
  startedAt    DateTime @default(now()) @db.Timestamptz(3)
  endedAt      DateTime @default(now()) @db.Timestamptz(3)
  scanned      Int
  created      Int
  updated      Int
  disabled     Int
  error        String?

  @@schema("public")
}

model billing_history {
  id                       String    @id @default(dbgenerated("(gen_random_uuid())::character varying")) @db.VarChar(36)
  license_key              String    @db.VarChar(20)
  invoice_number           String    @unique @db.VarChar(50)
  amount_pence             Int
  currency                 String?   @default("GBP") @db.VarChar(3)
  status                   String    @db.VarChar(20)
  stripe_invoice_id        String?   @db.VarChar(255)
  stripe_payment_intent_id String?   @db.VarChar(255)
  billed_at                DateTime? @default(now()) @db.Timestamptz(6)
  paid_at                  DateTime? @db.Timestamptz(6)

  @@index([license_key], map: "idx_billing_license")
  @@schema("public")
}

model chatbot_config {
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name            String?   @default("Assistant") @db.VarChar(255)
  welcome_message String?
  primary_color   String?   @default("#667eea") @db.VarChar(7)
  position        String?   @default("bottom-right") @db.VarChar(20)
  avatar_url      String?
  active          Boolean?  @default(true)
  settings        Json?     @default("{}")
  created_at      DateTime? @default(now()) @db.Timestamptz(6)
  updated_at      DateTime? @default(now()) @db.Timestamptz(6)

  @@schema("public")
}

model chatbot_logs {
  id               Int       @id @default(autoincrement())
  session_id       String?   @db.VarChar(255)
  customer_message String?
  chatbot_response String?
  timestamp        DateTime? @db.Timestamp(6)
  intent_detected  String?   @db.VarChar(255)
  conversation_id  String?   @db.VarChar(255)
  product_key      String?   @db.VarChar(255)
  domain           String?   @db.VarChar(255)
  user_id          String?   @db.VarChar(255)
  role             String?   @db.VarChar(50)
  content          String?
  created_at       DateTime? @db.Timestamp(6)

  @@schema("public")
}

model credentials_entity {
  name               String               @db.VarChar(128)
  data               String
  type               String               @db.VarChar(128)
  createdAt          DateTime             @default(dbgenerated("CURRENT_TIMESTAMP(3)")) @db.Timestamptz(3)
  updatedAt          DateTime             @default(dbgenerated("CURRENT_TIMESTAMP(3)")) @db.Timestamptz(3)
  id                 String               @id @unique(map: "pk_credentials_entity_id") @db.VarChar(36)
  isManaged          Boolean              @default(false)
  shared_credentials shared_credentials[]

  @@index([type], map: "idx_07fde106c0b471d8cc80a64fc8")
  @@schema("public")
}

model domain_licenses {
  domain       String @db.VarChar(255)
  license_key  String @db.VarChar(20)
  product_type String @db.VarChar(50)

  @@id([domain, license_key])
  @@schema("public")
}

model event_destinations {
  id          String   @id @db.Uuid
  destination Json
  createdAt   DateTime @default(dbgenerated("CURRENT_TIMESTAMP(3)")) @db.Timestamptz(3)
  updatedAt   DateTime @default(dbgenerated("CURRENT_TIMESTAMP(3)")) @db.Timestamptz(3)

  @@schema("public")
}

model execution_annotation_tags {
  annotationId          Int
  tagId                 String                @db.VarChar(24)
  annotation_tag_entity annotation_tag_entity @relation(fields: [tagId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_a3697779b366e131b2bbdae2976")
  execution_annotations execution_annotations @relation(fields: [annotationId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_c1519757391996eb06064f0e7c8")

  @@id([annotationId, tagId], map: "PK_979ec03d31294cca484be65d11f")
  @@index([tagId], map: "IDX_a3697779b366e131b2bbdae297")
  @@index([annotationId], map: "IDX_c1519757391996eb06064f0e7c")
  @@schema("public")
}

model execution_annotations {
  id                        Int                         @id(map: "PK_7afcf93ffa20c4252869a7c6a23") @default(autoincrement())
  executionId               Int                         @unique(map: "IDX_97f863fa83c4786f1956508496")
  vote                      String?                     @db.VarChar(6)
  note                      String?
  createdAt                 DateTime                    @default(dbgenerated("CURRENT_TIMESTAMP(3)")) @db.Timestamptz(3)
  updatedAt                 DateTime                    @default(dbgenerated("CURRENT_TIMESTAMP(3)")) @db.Timestamptz(3)
  execution_annotation_tags execution_annotation_tags[]
  execution_entity          execution_entity            @relation(fields: [executionId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_97f863fa83c4786f19565084960")

  @@schema("public")
}

model execution_data {
  executionId      Int              @id
  workflowData     Json             @db.Json
  data             String
  execution_entity execution_entity @relation(fields: [executionId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "execution_data_fk")

  @@schema("public")
}

model execution_entity {
  id                    Int                    @id(map: "pk_e3e63bbf986767844bbe1166d4e") @default(autoincrement())
  finished              Boolean
  mode                  String                 @db.VarChar
  retryOf               String?                @db.VarChar
  retrySuccessId        String?                @db.VarChar
  startedAt             DateTime?              @db.Timestamptz(3)
  stoppedAt             DateTime?              @db.Timestamptz(3)
  waitTill              DateTime?              @db.Timestamptz(3)
  status                String                 @db.VarChar
  workflowId            String                 @db.VarChar(36)
  deletedAt             DateTime?              @db.Timestamptz(3)
  createdAt             DateTime               @default(dbgenerated("CURRENT_TIMESTAMP(3)")) @db.Timestamptz(3)
  execution_annotations execution_annotations?
  execution_data        execution_data?
  workflow_entity       workflow_entity        @relation(fields: [workflowId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_execution_entity_workflow_id")
  execution_metadata    execution_metadata[]
  test_case_execution   test_case_execution[]

  @@index([deletedAt], map: "IDX_execution_entity_deletedAt")
  @@schema("public")
}

model execution_metadata {
  id               Int              @id(map: "PK_17a0b6284f8d626aae88e1c16e4") @default(autoincrement())
  executionId      Int
  key              String           @db.VarChar(255)
  value            String
  execution_entity execution_entity @relation(fields: [executionId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_31d0b4c93fb85ced26f6005cda3")

  @@unique([executionId, key], map: "IDX_cec8eea3bf49551482ccb4933e")
  @@schema("public")
}

model folder {
  id              String            @id(map: "PK_6278a41a706740c94c02e288df8") @db.VarChar(36)
  name            String            @db.VarChar(128)
  parentFolderId  String?           @db.VarChar(36)
  projectId       String            @db.VarChar(36)
  createdAt       DateTime          @default(dbgenerated("CURRENT_TIMESTAMP(3)")) @db.Timestamptz(3)
  updatedAt       DateTime          @default(dbgenerated("CURRENT_TIMESTAMP(3)")) @db.Timestamptz(3)
  folder          folder?           @relation("folderTofolder", fields: [parentFolderId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_804ea52f6729e3940498bd54d78")
  other_folder    folder[]          @relation("folderTofolder")
  project         project           @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_a8260b0b36939c6247f385b8221")
  folder_tag      folder_tag[]
  workflow_entity workflow_entity[]

  @@unique([projectId, id], map: "IDX_14f68deffaf858465715995508")
  @@schema("public")
}

model folder_tag {
  folderId   String     @db.VarChar(36)
  tagId      String     @db.VarChar(36)
  folder     folder     @relation(fields: [folderId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_94a60854e06f2897b2e0d39edba")
  tag_entity tag_entity @relation(fields: [tagId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_dc88164176283de80af47621746")

  @@id([folderId, tagId], map: "PK_27e4e00852f6b06a925a4d83a3e")
  @@schema("public")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model insights_by_period {
  id                Int               @id(map: "PK_b606942249b90cc39b0265f0575") @default(autoincrement())
  metaId            Int
  type              Int
  value             Int
  periodUnit        Int
  periodStart       DateTime?         @default(now()) @db.Timestamptz(0)
  insights_metadata insights_metadata @relation(fields: [metaId], references: [metaId], onDelete: Cascade, onUpdate: NoAction, map: "FK_6414cfed98daabbfdd61a1cfbc0")

  @@unique([periodStart, type, periodUnit, metaId], map: "IDX_60b6a84299eeb3f671dfec7693")
  @@schema("public")
}

model insights_metadata {
  metaId             Int                  @id(map: "PK_f448a94c35218b6208ce20cf5a1") @default(autoincrement())
  workflowId         String?              @unique(map: "IDX_1d8ab99d5861c9388d2dc1cf73") @db.VarChar(16)
  projectId          String?              @db.VarChar(36)
  workflowName       String               @db.VarChar(128)
  projectName        String               @db.VarChar(255)
  insights_by_period insights_by_period[]
  workflow_entity    workflow_entity?     @relation(fields: [workflowId], references: [id], onUpdate: NoAction, map: "FK_1d8ab99d5861c9388d2dc1cf733")
  project            project?             @relation(fields: [projectId], references: [id], onUpdate: NoAction, map: "FK_2375a1eda085adb16b24615b69c")
  insights_raw       insights_raw[]

  @@schema("public")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model insights_raw {
  id                Int               @id(map: "PK_ec15125755151e3a7e00e00014f") @default(autoincrement())
  metaId            Int
  type              Int
  value             Int
  timestamp         DateTime          @default(now()) @db.Timestamptz(0)
  insights_metadata insights_metadata @relation(fields: [metaId], references: [metaId], onDelete: Cascade, onUpdate: NoAction, map: "FK_6e2e33741adef2a7c5d66befa4e")

  @@schema("public")
}

model installed_nodes {
  name               String             @id(map: "PK_8ebd28194e4f792f96b5933423fc439df97d9689") @db.VarChar(200)
  type               String             @db.VarChar(200)
  latestVersion      Int                @default(1)
  package            String             @db.VarChar(241)
  installed_packages installed_packages @relation(fields: [package], references: [packageName], onDelete: Cascade, map: "FK_73f857fc5dce682cef8a99c11dbddbc969618951")

  @@schema("public")
}

model installed_packages {
  packageName      String            @id(map: "PK_08cc9197c39b028c1e9beca225940576fd1a5804") @db.VarChar(214)
  installedVersion String            @db.VarChar(50)
  authorName       String?           @db.VarChar(70)
  authorEmail      String?           @db.VarChar(70)
  createdAt        DateTime          @default(dbgenerated("CURRENT_TIMESTAMP(3)")) @db.Timestamptz(3)
  updatedAt        DateTime          @default(dbgenerated("CURRENT_TIMESTAMP(3)")) @db.Timestamptz(3)
  installed_nodes  installed_nodes[]

  @@schema("public")
}

model invalid_auth_token {
  token     String   @id(map: "PK_5779069b7235b256d91f7af1a15") @db.VarChar(512)
  expiresAt DateTime @db.Timestamptz(3)

  @@schema("public")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model licenses {
  license_key         String         @id @db.VarChar(20)
  email               String?        @db.VarChar(255)
  created_at          DateTime?
  used_at             DateTime?
  domain              String?        @db.VarChar(255)
  site_key            String?        @unique @db.VarChar(255) // Legacy - migrating to product_keys
  status              String?        @db.VarChar(20)
  subscription_id     String?        @db.VarChar(255)
  last_payment_date   DateTime?
  next_billing_date   DateTime?
  subscription_status String?        @db.VarChar(50)
  customer_name       String?        @db.VarChar(255)
  last_indexed        DateTime?
  plan                String?        @db.VarChar(50)
  products            String[]       @default([])
  is_pro              Boolean?       @default(false)
  currency            String?        @default("GBP") @db.VarChar(3)
  schema_name         String?        @db.VarChar(255)
  subtotal_pence      Int?           @default(0)
  discount_pence      Int?           @default(0)
  product_keys        product_keys[]
  custom_knowledge    custom_knowledge[]
  executions          executions[]
  data_flows          data_flows[]
  skill_executions    skill_executions[]
  pro_addon_pence     Int?           @default(0)
  total_pence         Int?           @default(0)
  activated_at        DateTime?      @db.Timestamptz(6)
  suspended_at        DateTime?      @db.Timestamptz(6)
  cancelled_at        DateTime?      @db.Timestamptz(6)

  @@index([domain], map: "idx_licenses_domain")
  @@index([email], map: "idx_licenses_email")
  @@index([site_key], map: "idx_licenses_site_key")
  @@index([status], map: "idx_licenses_status")
  @@index([used_at], map: "idx_licenses_used_at")
  @@schema("public")
}

model migrations {
  id        Int    @id(map: "PK_8c82d7f526340ab734260ea46be") @default(autoincrement())
  timestamp BigInt
  name      String @db.VarChar

  @@schema("public")
}

model pricing_rule_products {
  pricing_rule_id String @db.VarChar(36)
  product_id      String @db.VarChar(36)

  @@id([pricing_rule_id, product_id])
  @@schema("public")
}

model pricing_rules {
  id             String    @id @default(dbgenerated("(gen_random_uuid())::character varying")) @db.VarChar(36)
  type           String    @db.VarChar(20)
  name           String    @db.VarChar(255)
  description    String?
  min_products   Int?
  promo_code     String?   @unique @db.VarChar(50)
  valid_from     DateTime? @db.Timestamptz(6)
  valid_until    DateTime? @db.Timestamptz(6)
  usage_limit    Int?
  used_count     Int?      @default(0)
  discount_type  String    @db.VarChar(20)
  discount_value Int
  active         Boolean?  @default(true)
  created_at     DateTime? @default(now()) @db.Timestamptz(6)
  updated_at     DateTime? @default(now()) @db.Timestamptz(6)

  @@schema("public")
}

model processed_data {
  workflowId      String          @db.VarChar(36)
  context         String          @db.VarChar(255)
  createdAt       DateTime        @default(dbgenerated("CURRENT_TIMESTAMP(3)")) @db.Timestamptz(3)
  updatedAt       DateTime        @default(dbgenerated("CURRENT_TIMESTAMP(3)")) @db.Timestamptz(3)
  value           String
  workflow_entity workflow_entity @relation(fields: [workflowId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_06a69a7032c97a763c2c7599464")

  @@id([workflowId, context], map: "PK_ca04b9d8dc72de268fe07a65773")
  @@schema("public")
}

model products {
  id               String    @id @default(dbgenerated("(gen_random_uuid())::character varying")) @db.VarChar(36)
  name             String    @unique @db.VarChar(100)
  slug             String    @unique @db.VarChar(100)
  description      String?
  base_price_pence Int
  currency         String?   @default("GBP") @db.VarChar(3)
  features         Json?     @default("[]")
  schema_tables    Json?     @default("[]")
  setup_required   Boolean?  @default(true)
  active           Boolean?  @default(true)
  created_at       DateTime? @default(now()) @db.Timestamptz(6)
  updated_at       DateTime? @default(now()) @db.Timestamptz(6)

  @@schema("public")
}

model project {
  id                 String               @id(map: "PK_4d68b1358bb5b766d3e78f32f57") @db.VarChar(36)
  name               String               @db.VarChar(255)
  type               String               @db.VarChar(36)
  createdAt          DateTime             @default(dbgenerated("CURRENT_TIMESTAMP(3)")) @db.Timestamptz(3)
  updatedAt          DateTime             @default(dbgenerated("CURRENT_TIMESTAMP(3)")) @db.Timestamptz(3)
  icon               Json?                @db.Json
  description        String?              @db.VarChar(512)
  folder             folder[]
  insights_metadata  insights_metadata[]
  project_relation   project_relation[]
  shared_credentials shared_credentials[]
  shared_workflow    shared_workflow[]

  @@schema("public")
}

model project_relation {
  projectId String   @db.VarChar(36)
  userId    String   @db.Uuid
  role      String   @db.VarChar
  createdAt DateTime @default(dbgenerated("CURRENT_TIMESTAMP(3)")) @db.Timestamptz(3)
  updatedAt DateTime @default(dbgenerated("CURRENT_TIMESTAMP(3)")) @db.Timestamptz(3)
  user      user     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_5f0643f6717905a05164090dde7")
  project   project  @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_61448d56d61802b5dfde5cdb002")

  @@id([projectId, userId], map: "PK_1caaa312a5d7184a003be0f0cb6")
  @@index([userId], map: "IDX_5f0643f6717905a05164090dde")
  @@index([projectId], map: "IDX_61448d56d61802b5dfde5cdb00")
  @@schema("public")
}

model settings {
  key           String  @id(map: "PK_dc0fe14e6d9943f268e7b119f69ab8bd") @db.VarChar(255)
  value         String
  loadOnStartup Boolean @default(false)

  @@schema("public")
}

model setup_agent_logs {
  id             Int      @id @default(autoincrement())
  session_id     String   @db.VarChar(255)
  user_message   String?
  agent_response String?
  site_key       String?  @db.VarChar(255)
  domain         String?  @db.VarChar(255)
  timestamp      DateTime @db.Timestamp(6)

  @@index([session_id], map: "idx_setup_agent_logs_session_id")
  @@index([timestamp], map: "idx_setup_agent_logs_timestamp")
  @@schema("public")
}

model shared_credentials {
  credentialsId      String             @db.VarChar(36)
  projectId          String             @db.VarChar(36)
  role               String
  createdAt          DateTime           @default(dbgenerated("CURRENT_TIMESTAMP(3)")) @db.Timestamptz(3)
  updatedAt          DateTime           @default(dbgenerated("CURRENT_TIMESTAMP(3)")) @db.Timestamptz(3)
  credentials_entity credentials_entity @relation(fields: [credentialsId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_416f66fc846c7c442970c094ccf")
  project            project            @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_812c2852270da1247756e77f5a4")

  @@id([credentialsId, projectId], map: "PK_8ef3a59796a228913f251779cff")
  @@schema("public")
}

model shared_items {
  id          Int       @id @default(autoincrement())
  shared_by   String    @db.VarChar(20)
  shared_with String    @db.VarChar(255)
  item_type   String    @db.VarChar(50)
  item_config Json
  expires_at  DateTime?
  created_at  DateTime  @default(now())

  @@schema("public")
}

model shared_workflow {
  workflowId      String          @db.VarChar(36)
  projectId       String          @db.VarChar(36)
  role            String
  createdAt       DateTime        @default(dbgenerated("CURRENT_TIMESTAMP(3)")) @db.Timestamptz(3)
  updatedAt       DateTime        @default(dbgenerated("CURRENT_TIMESTAMP(3)")) @db.Timestamptz(3)
  project         project         @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_a45ea5f27bcfdc21af9b4188560")
  workflow_entity workflow_entity @relation(fields: [workflowId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_daa206a04983d47d0a9c34649ce")

  @@id([workflowId, projectId], map: "PK_5ba87620386b847201c9531c58f")
  @@schema("public")
}

model site_keys {
  id         Int       @id @default(autoincrement())
  site_key   String    @unique @db.VarChar(255)
  domain     String?   @db.VarChar(255)
  status     String?   @default("active") @db.VarChar(50)
  plan       String?   @default("free") @db.VarChar(50)
  created_at DateTime? @default(now()) @db.Timestamp(6)

  @@index([domain], map: "idx_site_keys_domain")
  @@index([status], map: "idx_site_keys_status")
  @@schema("public")
}

model smart_dashboard_insights {
  id           Int       @id @default(autoincrement())
  license_key  String    @db.VarChar(20)
  insight_type String    @db.VarChar(50)
  title        String    @db.VarChar(255)
  content      String
  severity     String?   @db.VarChar(20)
  created_at   DateTime  @default(now())
  expires_at   DateTime?
  metadata     Json?

  @@schema("public")
}

model smart_dashboard_requests {
  id           Int       @id @default(autoincrement())
  license_key  String    @db.VarChar(20)
  request_type String    @db.VarChar(50)
  query        String
  response     String?
  created_at   DateTime  @default(now())
  processed_at DateTime?

  @@schema("public")
}

model tag_entity {
  name           String           @unique(map: "idx_812eb05f7451ca757fb98444ce") @db.VarChar(24)
  createdAt      DateTime         @default(dbgenerated("CURRENT_TIMESTAMP(3)")) @db.Timestamptz(3)
  updatedAt      DateTime         @default(dbgenerated("CURRENT_TIMESTAMP(3)")) @db.Timestamptz(3)
  id             String           @id @unique(map: "pk_tag_entity_id") @db.VarChar(36)
  folder_tag     folder_tag[]
  workflows_tags workflows_tags[]

  @@schema("public")
}

model test_case_execution {
  id               String            @id(map: "PK_90c121f77a78a6580e94b794bce") @db.VarChar(36)
  testRunId        String            @db.VarChar(36)
  executionId      Int?
  status           String            @db.VarChar
  runAt            DateTime?         @db.Timestamptz(3)
  completedAt      DateTime?         @db.Timestamptz(3)
  errorCode        String?           @db.VarChar
  errorDetails     Json?             @db.Json
  metrics          Json?             @db.Json
  createdAt        DateTime          @default(dbgenerated("CURRENT_TIMESTAMP(3)")) @db.Timestamptz(3)
  updatedAt        DateTime          @default(dbgenerated("CURRENT_TIMESTAMP(3)")) @db.Timestamptz(3)
  inputs           Json?             @db.Json
  outputs          Json?             @db.Json
  test_run         test_run          @relation(fields: [testRunId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_8e4b4774db42f1e6dda3452b2af")
  execution_entity execution_entity? @relation(fields: [executionId], references: [id], onUpdate: NoAction, map: "FK_e48965fac35d0f5b9e7f51d8c44")

  @@index([testRunId], map: "IDX_8e4b4774db42f1e6dda3452b2a")
  @@schema("public")
}

model test_run {
  id                  String                @id(map: "PK_011c050f566e9db509a0fadb9b9") @db.VarChar(36)
  workflowId          String                @db.VarChar(36)
  status              String                @db.VarChar
  errorCode           String?               @db.VarChar
  errorDetails        Json?                 @db.Json
  runAt               DateTime?             @db.Timestamptz(3)
  completedAt         DateTime?             @db.Timestamptz(3)
  metrics             Json?                 @db.Json
  createdAt           DateTime              @default(dbgenerated("CURRENT_TIMESTAMP(3)")) @db.Timestamptz(3)
  updatedAt           DateTime              @default(dbgenerated("CURRENT_TIMESTAMP(3)")) @db.Timestamptz(3)
  test_case_execution test_case_execution[]
  workflow_entity     workflow_entity       @relation(fields: [workflowId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_d6870d3b6e4c185d33926f423c8")

  @@index([workflowId], map: "IDX_d6870d3b6e4c185d33926f423c")
  @@schema("public")
}

model user {
  id                     String             @id(map: "PK_ea8f538c94b6e352418254ed6474a81f") @default(dbgenerated("uuid_in((OVERLAY(OVERLAY(md5((((random())::text || ':'::text) || (clock_timestamp())::text)) PLACING '4'::text FROM 13) PLACING to_hex((floor(((random() * (((11 - 8) + 1))::double precision) + (8)::double precision)))::integer) FROM 17))::cstring)")) @db.Uuid
  email                  String?            @unique(map: "UQ_e12875dfb3b1d92d7d7c5377e2") @db.VarChar(255)
  firstName              String?            @db.VarChar(32)
  lastName               String?            @db.VarChar(32)
  password               String?            @db.VarChar(255)
  personalizationAnswers Json?              @db.Json
  createdAt              DateTime           @default(dbgenerated("CURRENT_TIMESTAMP(3)")) @db.Timestamptz(3)
  updatedAt              DateTime           @default(dbgenerated("CURRENT_TIMESTAMP(3)")) @db.Timestamptz(3)
  settings               Json?              @db.Json
  disabled               Boolean            @default(false)
  mfaEnabled             Boolean            @default(false)
  mfaSecret              String?
  mfaRecoveryCodes       String?
  role                   String
  lastActiveAt           DateTime?          @db.Date
  auth_identity          auth_identity[]
  project_relation       project_relation[]
  user_api_keys          user_api_keys[]

  @@schema("public")
}

model user_api_keys {
  id        String   @id(map: "PK_978fa5caa3468f463dac9d92e69") @db.VarChar(36)
  userId    String   @db.Uuid
  label     String   @db.VarChar(100)
  apiKey    String   @unique(map: "IDX_1ef35bac35d20bdae979d917a3") @db.VarChar
  createdAt DateTime @default(dbgenerated("CURRENT_TIMESTAMP(3)")) @db.Timestamptz(3)
  updatedAt DateTime @default(dbgenerated("CURRENT_TIMESTAMP(3)")) @db.Timestamptz(3)
  scopes    Json?    @db.Json
  user      user     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_e131705cbbc8fb589889b02d457")

  @@unique([userId, label], map: "IDX_63d7bbae72c767cf162d459fcc")
  @@schema("public")
}

model user_sessions {
  id         String    @id @default(dbgenerated("(gen_random_uuid())::character varying")) @db.VarChar(36)
  user_id    String    @db.VarChar(36)
  token      String    @unique @db.VarChar(255)
  ip_address String?   @db.VarChar(45)
  user_agent String?
  expires_at DateTime  @db.Timestamptz(6)
  created_at DateTime? @default(now()) @db.Timestamptz(6)

  @@index([user_id], map: "idx_sessions_user")
  @@schema("public")
}

model users {
  id                String    @id @default(dbgenerated("(gen_random_uuid())::character varying")) @db.VarChar(36)
  license_key       String    @db.VarChar(20)
  email             String    @unique @db.VarChar(255)
  password_hash     String    @db.VarChar(255)
  name              String?   @db.VarChar(255)
  role              String?   @default("customer") @db.VarChar(20)
  last_login_at     DateTime? @db.Timestamptz(6)
  created_at        DateTime? @default(now()) @db.Timestamptz(6)
  updated_at        DateTime? @default(now()) @db.Timestamptz(6)
  email_verified    Boolean?  @default(false)
  email_verified_at DateTime? @db.Timestamp(6)

  @@index([email], map: "idx_users_email")
  @@index([license_key], map: "idx_users_license")
  @@schema("public")
}

model variables {
  key   String  @unique @db.VarChar(50)
  type  String  @default("string") @db.VarChar(50)
  value String? @db.VarChar(255)
  id    String  @id @unique(map: "pk_variables_id") @db.VarChar(36)

  @@schema("public")
}

model webhook_entity {
  webhookPath     String          @db.VarChar
  method          String          @db.VarChar
  node            String          @db.VarChar
  webhookId       String?         @db.VarChar
  pathLength      Int?
  workflowId      String          @db.VarChar(36)
  workflow_entity workflow_entity @relation(fields: [workflowId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_webhook_entity_workflow_id")

  @@id([webhookPath, method], map: "PK_b21ace2e13596ccd87dc9bf4ea6")
  @@index([webhookId, method, pathLength], map: "idx_16f4436789e804e3e1c9eeb240")
  @@schema("public")
}

model workflow_entity {
  name                String                @db.VarChar(128)
  active              Boolean
  nodes               Json                  @db.Json
  connections         Json                  @db.Json
  createdAt           DateTime              @default(dbgenerated("CURRENT_TIMESTAMP(3)")) @db.Timestamptz(3)
  updatedAt           DateTime              @default(dbgenerated("CURRENT_TIMESTAMP(3)")) @db.Timestamptz(3)
  settings            Json?                 @db.Json
  staticData          Json?                 @db.Json
  pinData             Json?                 @db.Json
  versionId           String?               @db.Char(36)
  triggerCount        Int                   @default(0)
  id                  String                @id @unique(map: "pk_workflow_entity_id") @db.VarChar(36)
  meta                Json?                 @db.Json
  parentFolderId      String?               @db.VarChar(36)
  isArchived          Boolean               @default(false)
  execution_entity    execution_entity[]
  insights_metadata   insights_metadata?
  processed_data      processed_data[]
  shared_workflow     shared_workflow[]
  test_run            test_run[]
  webhook_entity      webhook_entity[]
  folder              folder?               @relation(fields: [parentFolderId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_workflow_parent_folder")
  workflow_history    workflow_history[]
  workflow_statistics workflow_statistics[]
  workflows_tags      workflows_tags[]

  @@index([name], map: "IDX_workflow_entity_name")
  @@schema("public")
}

model workflow_history {
  versionId       String          @id(map: "PK_b6572dd6173e4cd06fe79937b58") @db.VarChar(36)
  workflowId      String          @db.VarChar(36)
  authors         String          @db.VarChar(255)
  createdAt       DateTime        @default(dbgenerated("CURRENT_TIMESTAMP(3)")) @db.Timestamptz(3)
  updatedAt       DateTime        @default(dbgenerated("CURRENT_TIMESTAMP(3)")) @db.Timestamptz(3)
  nodes           Json            @db.Json
  connections     Json            @db.Json
  workflow_entity workflow_entity @relation(fields: [workflowId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_1e31657f5fe46816c34be7c1b4b")

  @@index([workflowId], map: "IDX_1e31657f5fe46816c34be7c1b4")
  @@schema("public")
}

model workflow_statistics {
  count           Int?            @default(0)
  latestEvent     DateTime?       @db.Timestamptz(3)
  name            String          @db.VarChar(128)
  workflowId      String          @db.VarChar(36)
  rootCount       Int?            @default(0)
  workflow_entity workflow_entity @relation(fields: [workflowId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_workflow_statistics_workflow_id")

  @@id([workflowId, name], map: "pk_workflow_statistics")
  @@schema("public")
}

model workflows_tags {
  workflowId      String          @db.VarChar(36)
  tagId           String          @db.VarChar(36)
  tag_entity      tag_entity      @relation(fields: [tagId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_workflows_tags_tag_id")
  workflow_entity workflow_entity @relation(fields: [workflowId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_workflows_tags_workflow_id")

  @@id([workflowId, tagId], map: "pk_workflows_tags")
  @@index([workflowId], map: "idx_workflows_tags_workflow_id")
  @@schema("public")
}

model product_keys {
  id               String             @id @default(dbgenerated("(gen_random_uuid())::character varying")) @db.VarChar(36)
  license_key      String             @db.VarChar(20)
  product          String             @db.VarChar(50)
  product_key      String             @unique @db.VarChar(255)
  created_at       DateTime?          @default(now()) @db.Timestamptz(6)
  last_used_at     DateTime?          @db.Timestamptz(6)
  status           String?            @default("active") @db.VarChar(20)
  metadata         Json?              @default("{}")
  licenses         licenses           @relation(fields: [license_key], references: [license_key], onDelete: Cascade)
  custom_knowledge custom_knowledge[]

  @@index([license_key], map: "idx_product_keys_license")
  @@index([product], map: "idx_product_keys_product")
  @@index([status], map: "idx_product_keys_status")
  @@index([product_key], map: "idx_product_keys_product_key")
  @@schema("public")
}

model custom_knowledge {
  id            String       @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar(36)
  product_key   String       @db.VarChar(255)
  license_key   String       @db.VarChar(20)
  knowledge_type String      @default("general") @db.VarChar(50)
  content       String       @db.Text
  is_active     Boolean      @default(true)
  expires_at    DateTime?    @db.Timestamptz(6)
  created_at    DateTime?    @default(now()) @db.Timestamptz(6)
  updated_at    DateTime?    @default(now()) @db.Timestamptz(6)
  created_by    String?      @db.VarChar(255)
  product_keys  product_keys @relation(fields: [product_key], references: [product_key], onDelete: Cascade)
  licenses      licenses     @relation(fields: [license_key], references: [license_key], onDelete: Cascade)

  @@unique([product_key, knowledge_type])
  @@index([product_key], map: "idx_custom_knowledge_product_key")
  @@index([license_key], map: "idx_custom_knowledge_license_key")
  @@index([is_active], map: "idx_custom_knowledge_active")
  @@schema("public")
}

// ==========================================
// EXECUTION MONITORING TABLES
// ==========================================

model executions {
  id                String    @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar(36)
  license_key       String    @db.VarChar(20)
  product_key       String?   @db.VarChar(255)
  user_id           String?   @db.VarChar(255)
  execution_type    String    @db.VarChar(50) // 'skill', 'workflow', 'api', 'chatbot', 'enrichment'
  execution_name    String    @db.VarChar(255)
  status            String    @db.VarChar(20) // 'pending', 'running', 'completed', 'failed', 'cancelled'
  
  // Request tracking
  request_id        String?   @unique @db.VarChar(255)
  parent_execution_id String? @db.VarChar(36)
  session_id        String?   @db.VarChar(255)
  
  // Timing
  started_at        DateTime  @default(now()) @db.Timestamptz(6)
  completed_at      DateTime? @db.Timestamptz(6)
  duration_ms       Int?
  
  // Data tracking
  input_data        Json?
  output_data       Json?
  error_data        Json?
  metadata          Json?     @default("{}")
  
  // Billing & Usage
  tokens_used       Int?      @default(0)
  api_calls_made    Int?      @default(0)
  data_processed_kb Float?    @default(0)
  cost_usd          Float?    @default(0)
  
  // Performance metrics
  cpu_time_ms       Int?
  memory_used_mb    Float?
  
  // Relationships
  licenses          licenses  @relation(fields: [license_key], references: [license_key], onDelete: Cascade)
  execution_events  execution_events[]
  execution_metrics execution_metrics[]
  data_flows        data_flows[]
  
  @@index([license_key], map: "idx_executions_license")
  @@index([user_id], map: "idx_executions_user")
  @@index([execution_type], map: "idx_executions_type")
  @@index([status], map: "idx_executions_status")
  @@index([started_at], map: "idx_executions_started")
  @@index([session_id], map: "idx_executions_session")
  @@index([parent_execution_id], map: "idx_executions_parent")
  @@schema("public")
}

model execution_events {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar(36)
  execution_id  String    @db.VarChar(36)
  event_type    String    @db.VarChar(50) // 'start', 'progress', 'error', 'warning', 'complete', 'data_transfer'
  event_name    String    @db.VarChar(255)
  event_data    Json?
  severity      String?   @db.VarChar(20) // 'info', 'warning', 'error', 'critical'
  timestamp     DateTime  @default(now()) @db.Timestamptz(6)
  
  executions    executions @relation(fields: [execution_id], references: [id], onDelete: Cascade)
  
  @@index([execution_id], map: "idx_execution_events_execution")
  @@index([event_type], map: "idx_execution_events_type")
  @@index([timestamp], map: "idx_execution_events_timestamp")
  @@schema("public")
}

model execution_metrics {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar(36)
  execution_id  String    @db.VarChar(36)
  metric_name   String    @db.VarChar(100)
  metric_value  Float
  metric_unit   String?   @db.VarChar(50)
  recorded_at   DateTime  @default(now()) @db.Timestamptz(6)
  
  executions    executions @relation(fields: [execution_id], references: [id], onDelete: Cascade)
  
  @@index([execution_id], map: "idx_execution_metrics_execution")
  @@index([metric_name], map: "idx_execution_metrics_name")
  @@index([recorded_at], map: "idx_execution_metrics_recorded")
  @@schema("public")
}

model data_flows {
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar(36)
  execution_id    String    @db.VarChar(36)
  license_key     String    @db.VarChar(20)
  
  // Flow tracking
  source_service  String    @db.VarChar(100)
  target_service  String    @db.VarChar(100)
  data_type       String    @db.VarChar(100) // 'user_input', 'api_response', 'db_query', 'llm_prompt', 'llm_response'
  
  // Data details
  data_size_bytes Int?
  data_hash       String?   @db.VarChar(255) // For integrity checking
  data_sample     Json?     // Sample of the data for inspection
  
  // Security & Compliance
  contains_pii    Boolean   @default(false)
  encryption_used Boolean   @default(true)
  data_classification String? @db.VarChar(50) // 'public', 'internal', 'confidential', 'restricted'
  
  // Timing
  transferred_at  DateTime  @default(now()) @db.Timestamptz(6)
  
  executions      executions @relation(fields: [execution_id], references: [id], onDelete: Cascade)
  licenses        licenses   @relation(fields: [license_key], references: [license_key], onDelete: Cascade)
  
  @@index([execution_id], map: "idx_data_flows_execution")
  @@index([license_key], map: "idx_data_flows_license")
  @@index([source_service], map: "idx_data_flows_source")
  @@index([target_service], map: "idx_data_flows_target")
  @@index([transferred_at], map: "idx_data_flows_transferred")
  @@schema("public")
}

// Skills system tables
model skills {
  id              String    @id @db.VarChar(100)
  name            String    @db.VarChar(255)
  description     String    @db.Text
  category        String    @db.VarChar(50)
  version         String    @db.VarChar(20)
  author          String    @db.VarChar(100)
  active          Boolean   @default(true)
  is_premium      Boolean   @default(false)
  configuration   Json      @default("{}")
  required_params Json?
  optional_params Json?
  created_at      DateTime  @default(now()) @db.Timestamptz(6)
  updated_at      DateTime  @default(now()) @db.Timestamptz(6)
  
  skill_executions skill_executions[]
  
  @@index([category], map: "idx_skills_category")
  @@index([active], map: "idx_skills_active")
  @@schema("public")
}

model skill_executions {
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar(36)
  skill_id        String    @db.VarChar(100)
  license_key     String    @db.VarChar(20)
  user_id         String?   @db.VarChar(255)
  tenant_id       String?   @db.VarChar(100)
  
  // Execution details
  status          String    @db.VarChar(20) // 'pending', 'running', 'completed', 'failed'
  input_params    Json?
  output_result   Json?
  error_message   String?   @db.Text
  
  // Timing
  started_at      DateTime  @default(now()) @db.Timestamptz(6)
  completed_at    DateTime? @db.Timestamptz(6)
  execution_time_ms Int?
  
  // Usage tracking
  tokens_used     Int?      @default(0)
  api_calls_made  Int?      @default(0)
  
  skills          skills    @relation(fields: [skill_id], references: [id], onDelete: Cascade)
  licenses        licenses  @relation(fields: [license_key], references: [license_key], onDelete: Cascade)
  
  @@index([skill_id], map: "idx_skill_executions_skill")
  @@index([license_key], map: "idx_skill_executions_license")
  @@index([user_id], map: "idx_skill_executions_user")
  @@index([status], map: "idx_skill_executions_status")
  @@index([started_at], map: "idx_skill_executions_started")
  @@schema("public")
}


// Vector embeddings for in-house vector store
model vector_embeddings {
  id          String    @id @db.VarChar(255)
  collection  String    @db.VarChar(100)
  embedding   Json      // Stored as JSONB in PostgreSQL
  metadata    Json?     @default("{}")
  dimension   Int
  created_at  DateTime? @default(now()) @db.Timestamptz(6)
  updated_at  DateTime? @default(now()) @db.Timestamptz(6)

  @@index([collection], map: "idx_vector_collection")
  @@index([created_at], map: "idx_vector_created")
  @@schema("public")
}
